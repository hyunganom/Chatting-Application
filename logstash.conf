input {
  # PostgreSQL 로그 파일 수집
  file {
    path => "/app/logs/postgresql/postgresql-*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }

  # Redis 로그 파일 수집
  file {
    path => "/app/logs/redis/redis.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }

  # Kafka 로그 파일 수집
  file {
    path => "/app/logs/kafka/kafka.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }

  # Spring 애플리케이션 로그 수집 (Filebeat로 전달됨)
  beats {
    port => 5044
  }
}


filter {
  # PostgreSQL 로그 필터링
  if [path] =~ "postgresql" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} %{GREEDYDATA:message}" }
    }
  }

  # Redis 로그 필터링
  else if [path] =~ "redis" {
    grok {
      match => { "message" => "%{TIME:timestamp} \[%{NUMBER:pid}\] %{IP:ip}:6379> %{GREEDYDATA:message}" }
    }
  }

  # Kafka 로그 필터링
  else if [path] =~ "kafka" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:loglevel} \[%{DATA:thread}\] %{GREEDYDATA:logger} - %{GREEDYDATA:message}" }
    }
  }

  # Spring 애플리케이션 로그 필터링 (JSON 형태로 처리)
  else if [type] == "spring-application-log" {
    json {
      source => "message"
    }
  }
}

output {
  # PostgreSQL 로그 Elasticsearch로 전송
  if [path] =~ "postgresql" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "postgres-logs-%{+YYYY.MM.dd}"
    }
  }

  # Redis 로그 Elasticsearch로 전송
  else if [path] =~ "redis" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "redis-logs-%{+YYYY.MM.dd}"
    }
  }

  # Kafka 로그 Elasticsearch로 전송
  else if [path] =~ "kafka" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "kafka-logs-%{+YYYY.MM.dd}"
    }
  }

  # Spring 애플리케이션 로그 Elasticsearch로 전송
  else {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "spring-logs-%{+YYYY.MM.dd}"
    }
  }

  # 디버그를 위한 stdout 출력 (선택 사항)
  stdout {
    codec => rubydebug
  }
}
