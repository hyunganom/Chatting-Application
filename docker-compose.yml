version: '3.8'

services:
  eureka-server:
    image: rheonik/chat-eureka-server:1.0
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./config/eureka-server/application.yml:/config/application.yml
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/" ]
      interval: 30s
      timeout: 10s
      retries: 3

  apigateway-server:
    image: rheonik/chat-apigateway-server:1.0
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./config/apigateway-server/application.yml:/config/application.yml
    networks:
      - app-network
    depends_on:
      - eureka-server

  user-service:
    image: rheonik/chat-user-service:1.0
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./config/user-service/application.yml:/config/application.yml
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - eureka-server

  chat-service:
    image: rheonik/chat-chat-service:1.0
    container_name: chat-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./config/chat-service/application.yml:/config/application.yml
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - eureka-server

  websocket-service:
    image: rheonik/chat-websocket-service:1.0
    container_name: websocket-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    volumes:
      - ./config/websocket-service/application.yml:/config/application.yml
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - eureka-server
      - kafka_broker1

  message-service:
    image: rheonik/chat-message-service:1.0
    container_name: message-service
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/chat_db
    ports:
      - "8083:8083"
    networks:
      - app-network
    depends_on:
      - mongo
      - eureka-server

  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
      POSTGRES_DB: chatapp_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /Users/hyunjae/desktop/postgresql.conf:/etc/postgresql/postgresql.conf
      - /Users/hyunjae/desktop/logs/postgresql:/var/log/postgresql
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    networks:
      - app-network

  mongo:
    image: mongo:4.4
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  redis:
    image: redis:6.2
    restart: always
    ports:
      - "6379:6379"
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
      - /Users/hyunjae/desktop/logs/redis:/var/log/redis
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka_broker1:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker1:9092,PLAINTEXT_INTERNAL://kafka_broker1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /Users/hyunjae/desktop/logs/kafka:/var/log/kafka
    networks:
      - app-network

  kafka_broker2:
    image: wurstmeister/kafka
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_INTERNAL://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker2:9093,PLAINTEXT_INTERNAL://kafka_broker2:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /Users/hyunjae/desktop/logs/kafka:/var/log/kafka
    networks:
      - app-network

  kafka_broker3:
    image: wurstmeister/kafka
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094,PLAINTEXT_INTERNAL://0.0.0.0:29094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_broker3:9094,PLAINTEXT_INTERNAL://kafka_broker3:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /Users/hyunjae/desktop/logs/kafka:/var/log/kafka
    networks:
      - app-network

  kafka_exporter:
    image: danielqsj/kafka-exporter
    command: --kafka.server=kafka_broker1:29092 --kafka.server=kafka_broker2:29093 --kafka.server=kafka_broker3:29094
    ports:
      - "9308:9308"  # kafka_exporter 기본 포트
    depends_on:
      - kafka_broker1
      - kafka_broker2
      - kafka_broker3
    networks:
      - app-network

  postgres_exporter:
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://chatuser:chatpass@postgres:5432/chatapp_db?sslmode=disable"
    depends_on:
      - postgres
    ports:
      - "9187:9187"
    networks:
      - app-network

  redis_exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
    depends_on:
      - redis
    ports:
      - "9121:9121"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - /Users/hyunjae/desktop/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

  node_exporter:
    image: prom/node-exporter
    container_name: node
    restart: always
    ports:
      - "9100:9100"
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:7.17.9
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app-network

  logstash:
    image: logstash:7.17.9
    volumes:
      - /Users/hyunjae/desktop/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - /Users/hyunjae/desktop/logs:/var/log  # 모든 로그 파일 디렉터리 마운트
    ports:
      - "5044:5044"  # Filebeat와의 통신 포트
    depends_on:
      - elasticsearch
    networks:
      - app-network

  kibana:
    image: kibana:7.17.9
    container_name: kibana
    volumes:
      - /Users/hyunjae/desktop/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.9
    user: root
    volumes:
      - /Users/hyunjae/desktop/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /Users/hyunjae/desktop/logs:/var/log:ro  # 모든 로그 파일 디렉터리 마운트
    depends_on:
      - logstash
    networks:
      - app-network


networks:
  app-network:

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  grafana_data:
  es_data:
